/****************************************************************************
 * Copyright (C) 2009-2015 EPAM Systems
 * 
 * This file is part of Indigo ELN.
 * 
 * This file may be distributed and/or modified under the terms of the
 * GNU General Public License version 3 as published by the Free Software
 * Foundation and appearing in the file LICENSE.GPL included in the
 * packaging of this file.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ***************************************************************************/
/*
 * Generated by XDoclet - Do not edit!
 */
package com.chemistry.enotebook.storage.interfaces;

import com.chemistry.enotebook.domain.JobModel;
import com.chemistry.enotebook.domain.NotebookPageModel;
import com.chemistry.enotebook.experiment.datamodel.page.InvalidNotebookRefException;
import com.chemistry.enotebook.searchquery.SearchQueryParams;
import com.chemistry.enotebook.service.container.ContainerService;
import com.chemistry.enotebook.service.storage.StorageService;
import com.chemistry.enotebook.session.security.SessionIdentifier;
import com.chemistry.enotebook.signature.classes.TemplateVO;
import com.chemistry.enotebook.storage.*;
import com.chemistry.enotebook.storage.exceptions.SearchTooMuchDataException;
import com.chemistry.enotebook.storage.exceptions.StorageTokenInvalidException;
import com.chemistry.enotebook.utils.CompositeCompressedBytes;

import java.util.List;

public interface StorageRemote extends StorageService, ContainerService {

	public StorageContextInterface retrieveData(StorageContextInterface context, SessionIdentifier sessionID)
			throws StorageException, StorageTokenInvalidException;

	public ValidationInfo validateNotebook(String siteCode, String notebook, String experiment, String pageVersion) throws StorageException;
	
	public ValidationInfo validateNotebook(String siteCode, String notebook, String experiment) throws StorageException;

	public void createNotebook(String notebook, SessionIdentifier sessionID) throws StorageException, NotebookInvalidException, NotebookExistsException;

	public void createNotebook(String siteCode, String userId, String notebook, SessionIdentifier sessionID) throws StorageException, NotebookInvalidException;

	public boolean deleteExperiment(String siteCode, String notebook, String experiment, int version, SessionIdentifier sessionID)
			throws StorageException, InvalidNotebookRefException;

	public CompositeCompressedBytes searchReactionInfo(SearchQueryParams params, boolean bool) throws StorageException, SearchTooMuchDataException;

	public int getNextExperimentForNotebook(String notebook) throws StorageException, NotebookInvalidException;
    
	public String[] getUsersFullName(String[] userIDs) throws StorageException;

	public List<SignaturePageVO> getExperimentsBeingSigned(String ntUserID) throws StorageException;

	public SignaturePageVO getNotebookPageStatus(String siteCode, String nbRefStr, int version) throws StorageException, InvalidNotebookRefException;

	public void updateNotebookPageStatus(String siteCode, String nbRefStr, int version, String status) throws StorageException, InvalidNotebookRefException;

	public void updateNotebookPageStatus(String siteCode, String nbRefStr, int version, String status, int ussiKey) throws StorageException, InvalidNotebookRefException;

	public JobModel getRegistrationJob(String jobId) throws StorageException;
	
	public List<JobModel> getAllRegistrationJobs(String userId, String status) throws StorageException;
	
	public List getAllRegistrationJobsAndUpdateStatus(String status)throws StorageException;
	
	public CompositeCompressedBytes generateExperimentPDF(String siteCode, String nbRefStr, int version, String timeZoneId, boolean bool) throws StorageException, InvalidNotebookRefException;
	
	public CompositeCompressedBytes getExperimentPDF(String siteCode, String nbRefStr, int version, boolean bool) throws StorageException, InvalidNotebookRefException;

	public void storeExperimentPDF(String siteCode, String nbRefStr, int version, byte[] pdf) throws StorageException, InvalidNotebookRefException;
	
	//Refer to ContainerService class for methods description.StrorageRemote interface extends this.
	
	//Refer to StorageService class for methods description.StrorageRemote interface extends this.

	public int checkCompliance(String username, int numComplianceDays) throws StorageException;
	
	public void updateNotebookPage(String siteCode, String nbRefStr, int version, String status, int ussiKey,byte[] pdfContent,String completionDateTSStr) throws StorageException, InvalidNotebookRefException;
	
	public void updateNotebookPage(String siteCode, String nbRefStr, int version, String status, byte[] pdfContent, String pageXMLMetadata) throws StorageException, InvalidNotebookRefException;

//	/**
//	 * @deprecated - this method should no longer be used as NotebookUser is a singleton and passwords should never be passed in the clear
//	 * Use 
//	 * public boolean completeExperiment(java.lang.String siteCode, java.lang.String nbRefStr, int version, java.lang.String templateName, java.lang.String[] templateBlockNames, com.chemistry.enotebook.experiment.datamodel.user.NotebookUser user) throws StorageException, InvalidNotebookRefException, java.rmi.RemoteException
//	 * instead. 
//	 */
	public boolean completeExperiment(String siteCode, String nbRefStr, int version, TemplateVO template, com.chemistry.enotebook.experiment.datamodel.user.NotebookUser user, String timeZoneId) throws StorageException, InvalidNotebookRefException;
	
	public String getNotebookPageCompleteStatus(String siteCode, String nbRefStr, int version) throws InvalidNotebookRefException, StorageException;
		
	public void createCeNExperiment(NotebookPageModel pageModel) throws StorageException;
	
	public void removeCRORequestId(String requestId) throws StorageException;
	
	public ValidationInfo getNotebookInfo(String siteCode, String notebook) throws StorageException;
}
