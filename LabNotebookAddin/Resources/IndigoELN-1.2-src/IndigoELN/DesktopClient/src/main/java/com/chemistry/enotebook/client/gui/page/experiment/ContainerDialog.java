/****************************************************************************
 * Copyright (C) 2009-2015 EPAM Systems
 * 
 * This file is part of Indigo ELN.
 * 
 * This file may be distributed and/or modified under the terms of the
 * GNU General Public License version 3 as published by the Free Software
 * Foundation and appearing in the file LICENSE.GPL included in the
 * packaging of this file.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ***************************************************************************/
package com.chemistry.enotebook.client.gui.page.experiment;

import com.chemistry.enotebook.client.controller.MasterController;
import com.chemistry.enotebook.client.gui.common.utils.CeNComboBox;
import com.chemistry.enotebook.domain.container.Container;
import com.chemistry.enotebook.utils.CeNDialog;
import com.jgoodies.forms.builder.PanelBuilder;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Enumeration;

public class ContainerDialog extends CeNDialog {
	
	private static final long serialVersionUID = 4904344712033735446L;
	
	private static final String ADD_OTHER_CONTAINERS_TO_MY_CONTAINERS = "Add Other Containers to My Containers";
	private static final String NO_CONTAINERS = "No Containers";
	private static final String SELECT_CONTAINER_FROM_MY_LIST = "Select a Container from My Containers:";
	private static final String USE_OTHER_CONTAINERS = "Use Other Containers";
	private ButtonGroup otherButtonGroup = null;
	PanelBuilder builder = null;
	Container selectedContainer = null;
	private CompoundManagementMonomerContainer monomerContainer;
	
	/** Creates new form Test2 */
	public ContainerDialog(CompoundManagementMonomerContainer monomerContainer, boolean modal, CeNComboBox containerListCombo) {
		super(MasterController.getGUIComponent(), modal);
		this.monomerContainer = monomerContainer;
		this.containerListCombo = containerListCombo;
		initComponents();
		Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
		Dimension labelSize = getPreferredSize();
		setLocation(screenSize.width / 2 - (labelSize.width / 2), screenSize.height / 2 - (labelSize.height / 2));

		//this.show();

		this.setTitle("Load Order From Other");
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	//GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc=" Generated Code ">
	private void initComponents() {
		jLabel4 = new javax.swing.JLabel();
		jLabel5 = new javax.swing.JLabel();
		jLabel6 = new javax.swing.JLabel();
		otherSortMonomerCombo = new CeNComboBox();
		otherAmountUsedCombo = new CeNComboBox();
		otherCompoundManagementOrderTextField = new JTextField();
		otherContainerRadio = new javax.swing.JRadioButton();
		myListRadio = new javax.swing.JRadioButton();
		//containerListCombo = new CeNComboBox();
		noContainerRadio = new javax.swing.JRadioButton();
		addOtherCheckBox = new javax.swing.JCheckBox();
		fillBtn = new javax.swing.JButton();
		cancelBtn = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);  // vb todo dispose
		jLabel4.setText("Other Order:");

		jLabel5.setText("Amounts to Use:");

		jLabel6.setText("Sort monomers by:");

		otherSortMonomerCombo.setModel(monomerContainer.sortMonomerCombo.getModel());

		otherAmountUsedCombo.setModel(monomerContainer.amountUsedCombo.getModel());
		otherContainerRadio.setText(USE_OTHER_CONTAINERS);
		otherContainerRadio.setActionCommand(USE_OTHER_CONTAINERS);
		otherContainerRadio.setBorder(javax.swing.BorderFactory.createEmptyBorder(0,	0, 0, 0));
		otherContainerRadio.setMargin(new java.awt.Insets(0, 0, 0, 0));

		myListRadio.setText(SELECT_CONTAINER_FROM_MY_LIST);
		myListRadio.setActionCommand(SELECT_CONTAINER_FROM_MY_LIST);
		myListRadio.setBorder(javax.swing.BorderFactory.createEmptyBorder(0,0, 0, 0));
		myListRadio.setMargin(new java.awt.Insets(0, 0, 0, 0));
		myListRadio.setSelected(true);
	
		noContainerRadio.setText(NO_CONTAINERS);
		noContainerRadio.setActionCommand(NO_CONTAINERS);
		noContainerRadio.setBorder(javax.swing.BorderFactory.createEmptyBorder(0,0, 0, 0));
		noContainerRadio.setMargin(new java.awt.Insets(0, 0, 0, 0));

		addOtherCheckBox.setText(ADD_OTHER_CONTAINERS_TO_MY_CONTAINERS);
		addOtherCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
		addOtherCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
		
		otherButtonGroup = new ButtonGroup();
		otherButtonGroup.add(otherContainerRadio);
		otherButtonGroup.add(myListRadio);
		otherButtonGroup.add(noContainerRadio);
		
		this.getContentPane().setLayout(new BorderLayout());
		this.getContentPane().add(this.getPanel1(), BorderLayout.PAGE_START);
		this.getContentPane().add(this.getInnerPanel(), BorderLayout.CENTER);
		this.getContentPane().add(this.getPanel2(), BorderLayout.PAGE_END);
		validate();
		pack();
		
		fillBtn.setText("  Fill  ");
		fillBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				fillBtnActionPerformed();
			}
		});

		cancelBtn.setText("Cancel");
		cancelBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancelBtnActionPerformed();
			}
		});
		
		ActionListener containerActionListener = new ActionListener() {
		      public void actionPerformed(ActionEvent actionEvent) {
		    	  AbstractButton aButton = (AbstractButton) actionEvent.getSource();
		    	  String selectedRadio = aButton.getText();
		    	  if (selectedRadio.equals(USE_OTHER_CONTAINERS)) {
		    		  addOtherCheckBox.setEnabled(true);
		    		  containerListCombo.setEnabled(false);
		    		  otherSortMonomerCombo.setEnabled(false);
		    	  } else if (selectedRadio.equals(SELECT_CONTAINER_FROM_MY_LIST)) {
		    		  containerListCombo.setEnabled(true);
		    		  otherSortMonomerCombo.setEnabled(true);
		    		  addOtherCheckBox.setEnabled(false);
		    	  } else {
		    		  containerListCombo.setEnabled(false);
		    		  otherSortMonomerCombo.setEnabled(false);
		    		  addOtherCheckBox.setEnabled(false);
		    	  }
		      }
		    };			
		noContainerRadio.addActionListener(containerActionListener);
		myListRadio.addActionListener(containerActionListener);
		otherContainerRadio.addActionListener(containerActionListener);
		
		addOtherCheckBox.setEnabled(false);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	protected void defaultApplyAction() {
		fillBtnActionPerformed();
	}
	
	protected void defaultCancelAction() {
		cancelBtnActionPerformed();
	}

	private Component getPanel1() {
		FormLayout formLayout = new FormLayout("10dlu, 10dlu, 58dlu, right:40dlu, 7dlu, left:40dlu, 40dlu, 13dlu, 10dlu", 
						"10dlu,15dlu,5dlu,15dlu,7dlu");	
		
		builder = new PanelBuilder(formLayout);
		CellConstraints cc1 = new CellConstraints();
		builder.add( jLabel4,cc1.xyw( 3, 2, 2));
		builder.add(otherCompoundManagementOrderTextField, cc1.xyw(6 , 2, 2));
		
		builder.add( jLabel5,cc1.xyw( 3, 4, 2));
		builder.add(otherAmountUsedCombo, cc1.xyw(6 , 4, 2));

		return builder.getPanel();
	}
	
	private Component getPanel2() {
		FormLayout formLayout = new FormLayout("75dlu, right:40dlu, 15dlu, left:40dlu, 10dlu", "10dlu,15dlu,10dlu");
		builder = new PanelBuilder(formLayout);
		CellConstraints cc1 = new CellConstraints();
		builder.add( fillBtn,cc1.xy( 2, 2));
		builder.add( cancelBtn,cc1.xy( 4, 2));
		return builder.getPanel();
	}
	
	private Component getInnerPanel() {
		FormLayout formLayout = new FormLayout("20dlu, 10dlu, 98dlu, 95dlu, 10dlu", 
					"15dlu, 1dlu, 15dlu, 5dlu, 15dlu, 1dlu, 15dlu, 5dlu, 15dlu");
		builder = new PanelBuilder(formLayout);
		CellConstraints cc1 = new CellConstraints();

		builder.add(otherContainerRadio,cc1.xyw( 2, 1, 3));
		builder.add(addOtherCheckBox,cc1.xyw( 3, 3, 3));
		
		builder.add(myListRadio,cc1.xyw( 2, 5, 2));
		builder.add(containerListCombo,cc1.xy( 4, 5));
		
		builder.add(jLabel6,cc1.xy( 3, 7));
		builder.add(otherSortMonomerCombo,cc1.xy( 4, 7));
		
		builder.add(noContainerRadio,cc1.xyw( 2, 9, 3));

		return builder.getPanel();
	}

	//GEN-FIRST:event_cancelBtnActionPerformed
	private void cancelBtnActionPerformed() {
		this.dispose();
	}//GEN-LAST:event_cancelBtnActionPerformed

	//GEN-FIRST:event_fillBtnActionPerformed
	private void fillBtnActionPerformed() {
		String selectedOrderId = otherCompoundManagementOrderTextField.getText();
		if (selectedOrderId.trim().equals("")) {
			JOptionPane.showMessageDialog(MasterController.getGUIComponent(), "Compound Management Order ID is not entered.");
			return;
		}
		Container container = null;
		if (containerListCombo.getModel().getSelectedItem() != null && !containerListCombo.getModel().getSelectedItem().equals("")) {
			container = (Container)containerListCombo.getModel().getSelectedItem();
		} else if (myListRadio.isSelected()) {
			JOptionPane.showMessageDialog(MasterController.getGUIComponent(), "Please select a Container.", "Container Error", JOptionPane.ERROR_MESSAGE);
			return;
		}
		
		String otherSortOrder = ""+otherSortMonomerCombo.getSelectedItem();
		monomerContainer.loadCompoundManagementOrders(selectedOrderId, otherButtonGroup.getSelection().getActionCommand(), addOtherCheckBox.isSelected(), container, 
								otherSortOrder, otherAmountUsedCombo.getSelectedItem().toString());
		this.dispose();
	}

    // This method returns the selected radio button in a button group
    public static JRadioButton getSelection(ButtonGroup group) {
        for (Enumeration<AbstractButton> e=group.getElements(); e.hasMoreElements(); ) {
            JRadioButton b = (JRadioButton)e.nextElement();
            if (b.getModel() == group.getSelection()) {
                return b;
            }
        }
        return null;
    }


	/**
	 * @param args the command line arguments
	 */
/*		public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new Test2(new javax.swing.JFrame(), true).setVisible(true);
			}
		});
	}*/

	//GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JButton fillBtn;
	private javax.swing.JButton cancelBtn;
	private javax.swing.JCheckBox addOtherCheckBox;
	//public javax.swing.JComboBox containerListCombo;
	private CeNComboBox containerListCombo;
	private javax.swing.JComboBox otherAmountUsedCombo;
	private javax.swing.JComboBox otherSortMonomerCombo;
	protected JTextField otherCompoundManagementOrderTextField;
	//private JCheckBox showContainerOptionsBox;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private JRadioButton otherContainerRadio;
	private JRadioButton myListRadio;
	private JRadioButton noContainerRadio;
	// End of variables declaration//GEN-END:variables
	ButtonGroup group = null;
}
