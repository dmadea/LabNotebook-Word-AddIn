/****************************************************************************
 * Copyright (C) 2009-2015 EPAM Systems
 * 
 * This file is part of Indigo ELN.
 * 
 * This file may be distributed and/or modified under the terms of the
 * GNU General Public License version 3 as published by the Free Software
 * Foundation and appearing in the file LICENSE.GPL included in the
 * packaging of this file.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ***************************************************************************/
/*
 * Generated by XDoclet - Do not edit!
 */
package com.chemistry.enotebook.analyticalservice.interfaces;

import com.chemistry.enotebook.analyticalservice.classes.AnalyticalServiceMetaData;
import com.chemistry.enotebook.analyticalservice.classes.SearchResult;
import com.chemistry.enotebook.analyticalservice.classes.UploadFileAttributes;
import com.chemistry.enotebook.analyticalservice.exceptions.AnalyticalServiceAccessException;
import com.chemistry.enotebook.analyticalservice.exceptions.AnalyticalServiceException;
import com.chemistry.enotebook.domain.AnalysisModel;
import com.chemistry.enotebook.servicelocator.PropertyException;

import java.io.IOException;

public interface AnalyticalUIService
{
   /**
    * A business method if instruction flag is true resultList would be marked as linked in AnalyticalService for the sampleRef
    * @throws PropertyException
    */
   public void markFileAsLinked(java.lang.String sampleRef,java.util.List<com.chemistry.enotebook.analyticalservice.classes.SearchResult> resultList,boolean isLinked )
		      throws com.chemistry.enotebook.servicelocator.PropertyException, com.chemistry.enotebook.analyticalservice.exceptions.AnalyticalServiceException, com.chemistry.enotebook.analyticalservice.exceptions.AnalyticalServiceAccessException;

   /**
    * A business method
    * @throws PropertyException
    * @throws IOException
    */
   public byte[] retrieveFileContents( String domainID, String fileID, String site
                                        )
      throws PropertyException, IOException, AnalyticalServiceException;

   /**
    * A business method, returns All Sites, Files Types, Instrument Types
    * @throws PropertyException
    * @throws CeNAnalyticalServiceAccessException
    */
   public AnalyticalServiceMetaData retrieveAnalyticalServiceMetaData(  )
   	  throws PropertyException, AnalyticalServiceException;

   /**
    * A business method,
    * @throws PropertyException
    * @throws AnalyticalServiceAccessException
    */
   public SearchResult doFileUpload( UploadFileAttributes fileAttributes,
                                                   byte[] fileContents
                                                    )
   		throws com.chemistry.enotebook.analyticalservice.exceptions.AnalyticalServiceException;

   /**
    * A business method,
    * @throws PropertyException
    */
   public java.util.List<java.lang.String> getAllInstrumentTypesFromDB(  )
		      throws com.chemistry.enotebook.servicelocator.PropertyException;

   /**
    * A business method
    */
   public boolean canMarkFileAsLinked();

   /**
    * A business method
    * @param query is a string specific to AnalyticalService searches.
    * @param List<String> compoundManagementSiteCodes to use when filtering the search
    * @param sessionID - session from CeN
    * @throws AnalyticalServiceException
    */
   public com.chemistry.enotebook.analyticalservice.classes.SearchResultsSummary retrieveAnalyticalServiceData( java.lang.String query,java.util.List<java.lang.String> al_sites )
		      throws com.chemistry.enotebook.analyticalservice.exceptions.AnalyticalServiceException;

   

   /**
    * A method to set the Notebook Batch ID for a given file in AnalyticalService. This is used when the sample reference entered at the instrument does not match exactly with the Notebook Batch #.
    * @throws PropertyException
    */
   public void setFileBatchID( java.util.List<AnalysisModel> updateList )
		      throws com.chemistry.enotebook.servicelocator.PropertyException, com.chemistry.enotebook.analyticalservice.exceptions.AnalyticalServiceException, com.chemistry.enotebook.analyticalservice.exceptions.AnalyticalServiceAccessException;

   /**
    * A business method
    * @return true only if all sites are on line.
    */
   public boolean checkHealth() throws com.chemistry.enotebook.analyticalservice.exceptions.AnalyticalServiceException;
}
